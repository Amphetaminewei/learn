这是一个基于template的简易智能指针demo，用来在特定情况下代替原生指针防止一些不安全和不能及时删除指针的情况发生
这个类将原生指针封装成一个对象，然后通过析构函数来delete指针

复制和赋值：
    这个类禁止多个对象指向同一个地址，在赋值时会将右值的所有权交给左值然后将右值指针制为空
    在复制时作为参数的对象会把指针所有权交给调用构造复制构造函数的对象并将指针制空
    复制和赋值都支持对两个类型不同的智能指针进行操作，会调用其实际类型的隐式类型转换

getPtr():
    返回内部的指针

release()：
    返回内部指针并移除对象对指针的拥有权
    注意这里名没有将指针指向的内存释放，也就是oldPointee及其继任者有义务将这块内存释放
	如果你想用这个函数来将一个智能指针置为空，而不接受其返回值，那将有一块你无法释放的内存一直存在

	int *b = a.release()这样可以
	a.release() 这样会不能正常释放指针，因为a已经失去了指针的掌控权，但是没有一个指针出来继承这个掌控权
	掌控权在oldPointee手里但是你得不到他

reset()：
    delete原本的指针并绑定一个新指针


这个类只能做一个demo描述一下思路因为实际上这样操作指针还是会有问题的而且很严重，其中最明显的就是在对象析构的时候会出现问题，
我在测试的时候每次调用到delete的时候都会触发一个安全性的断点，无论是析构函数还是reset函数的delete都会有这个问题emmmm
这个问题我查了很多资料还没解决
还有就是赋值和赋值时类型转换！